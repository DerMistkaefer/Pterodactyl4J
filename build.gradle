plugins {
    id 'java'
    id 'maven'
}

sourceCompatibility = targetCompatibility = 1.8

def versionObject = new Version(major: 2, minor: "BETA")

version "$versionObject"

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: "https://repo.mattmalec.com/repository/releases") {
                authentication(userName: System.getenv("jenkinsUsername"), password: System.getenv("jenkinsPassword"))
            }
            pom.version = version
            pom.artifactId = "Pterodactyl4J"
            pom.groupId = "com.mattmalec"
        }
    }
}

javadoc {
    failOnError = false
    options {
        memberLevel = JavadocMemberLevel.PUBLIC
        encoding = "UTF-8"
    }
    if (options instanceof StandardJavadocDocletOptions) {
        StandardJavadocDocletOptions opt = options
        opt.author()
        opt.tags("incubating:a:Incubating:")
        opt.links(
                "https://docs.oracle.com/javase/8/docs/api/",
                "https://square.github.io/okhttp/3.x/okhttp/")
        if (JavaVersion.current().isJava9Compatible()) {
            opt.addBooleanOption("html5", true)
            opt.addStringOption("-release", "8")
        }
        if (JavaVersion.current().isJava11Compatible()) {
            opt.addBooleanOption("-no-module-directories", true)
        }
    }

    exclude("com/mattmalec/pterodactyl4j/requests",

            "com/mattmalec/pterodactyl4j/utils/Checks.java",
            "com/mattmalec/pterodactyl4j/utils/ExceptionUtils.java",
            "com/mattmalec/pterodactyl4j/utils/LockUtils.java",
            "com/mattmalec/pterodactyl4j/utils/NamedThreadFactory.java",

            "com/mattmalec/pterodactyl4j/entities/impl",
            "com/mattmalec/pterodactyl4j/application/entities/impl",
            "com/mattmalec/pterodactyl4j/client/entities/impl",

            "com/mattmalec/pterodactyl4j/client/ws/handle",
            "com/mattmalec/pterodactyl4j/client/ws/WebSocketClient.java",
            "com/mattmalec/pterodactyl4j/client/ws/WebSocketAction.java")
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from System.getProperty("java.class.path")
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'com.squareup.okhttp3:okhttp:3.11.0'
    implementation 'org.json:json:20160810'
    implementation 'org.slf4j:slf4j-api:1.7.25'
}

compileJava.options.encoding = 'UTF-8'

class Version {
    def major, minor
    def build = System.getenv('BUILD_NUMBER') ?: 'DEV'

    String toString() {
        return "$major.${minor}_$build"
    }
}
