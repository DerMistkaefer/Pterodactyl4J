plugins {
    id 'java'
    id 'maven'
}

sourceCompatibility = 1.8

def versionObject = new Version("2", "BETA")

version "$versionObject"

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: "https://repo.mattmalec.com/repository/releases") {
                authentication(userName: getProjectProperty("jenkinsUsername"), password: getProjectProperty("jenkinsPassword"))
            }
            pom.version = version
            pom.artifactId = "Pterodactyl4J"
            pom.groupId = "com.mattmalec"
        }
    }
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from System.getProperty("java.class.path")
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'com.squareup.okhttp3:okhttp:3.11.0'
    implementation 'org.json:json:20160810'
    implementation 'org.slf4j:slf4j-api:1.7.25'
}

compileJava.options.encoding = 'UTF-8'

def getProjectProperty(propertyName) {
    def property = ""
    if (hasProperty(propertyName)) {
        property = project.properties[propertyName] ?: ""
    }
    return property
}

class Version {
    def major
    def minor

    def build = System.getenv('BUILD_NUMBER') ?: 'DEV'

    Version(String major, String minor) {
        this.major = major
        this.minor = minor
    }

    @Override
    String toString() {
        return "$major.${minor}_$build"
    }
}
